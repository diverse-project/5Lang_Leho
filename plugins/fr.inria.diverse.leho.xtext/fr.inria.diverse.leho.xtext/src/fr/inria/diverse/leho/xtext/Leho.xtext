// automatically generated by Xtext
grammar fr.inria.diverse.leho.xtext.Leho with org.eclipse.xtext.common.Terminals

import "platform:/resource/fr.inria.diverse.leho.model/model/Leho.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Policy:
	configuration=Configuration filter=Filter?
;

Configuration:
	"Discard" "=" ({DiscardDrop} "drop"|{DiscardReject} "reject")
;
 
Filter:
	firstRule=Rule
;

Rule:
	RuleAtomic next=Rule?
;

RuleAtomic returns Rule:
	action=Action packetspec=PacketSpec ("from" from=IpAddSpec ("to" to=IpAddSpec)?)?
;

Action:
	{Allow} "allow"
	| {Drop} "drop"
	| {Reject} "reject"
	| {Discard} "discard"
	| {Bandwidth} "limit""rate""to"  number=(INT|IPNUMBER) unit=Unit "/" time=Time
;

Unit:
	{BitUnit}"b"|{OctetUnit}"o"|{PacketUnit}"p"
;

Time:
	{Day}"d"|{Hour}"h"|{Second}"s"|{Minute}"m"
;

PacketSpec:
	port=Port? extensionheader+=ExtensionHeader+
;

Port:
	{Inbound} "inbound" | {Outbound} "outbound"
;

ExtensionHeader:
	{HopByHopOpts} "Hop-by-Hop" ("where" options+=OptionHopByHop ("and" options+=OptionHopByHop)*)?
	| {Routing} "Routing-Header" ("where" "type" "=" types+=TypeRouting ("and" "type" "=" types+=TypeRouting)*)?
	| {Fragment} "Fragment-Header"
	| {EncapsulingSecurityPayload} "Encapsuling-Security-Payload"
	| {AuthentificationHeader} "Autentification-Header"
	| {DestinationOpts} "Destination-Options"  ("where" options+=OptionDestination ("and" options+=OptionDestination)*)?
	| {MobilityHeader} "Mobility-Header"
	| {HostIdentityProtocol} "Host-Identity-Protocol"
	| {Shim6Protocol} "Shim6-Protocol"
	| {ExperimentationAndTesting} "Experimentation-Testing"
	| {UnknownEH} "Unkown-EH"
;

OptionHopByHop:
	{JumboPayload} "Jumbo-Payload"
	| {RPLOption} "RPL-Option"
	| {RouterAlert} "Router-Alert" ("where" "protocol" "=" protocol+=Protocol ("and" "protocol" "=" protocol+=Protocol)*)
	| {QuickStart} "Quick-Start"
	| {Calipso} "CALIPSO"
	| {SmfDpd} "SMF_DPD"
	| {MPLOption} "MPL-Option"
	| Options
;

OptionDestination:
	{LineIdOption} "Line-Identification-Option"
	| {ILNPNonce} "ILNP-Nonce"
	| {TunnelEncapsulationLimit} "Tunnel-Encapsulation-Limit"
	| {IPv6PerformanceDiagnostic} "IPv6-Performance-Diagnostic"
	| {HomeAdress} "Home-Adress"
	| Options
;

Options:
	{Pad1} "Pad1"
	| {PadN} "PadN"
	| {EndPointIdentification} "Endpoint-Identification"
	| {Deprecated} "Deprecated"
	| {RFC3692Experiment} "RFC3962-Experiment"
;

TypeRouting:
	{SourceRoute} "Source-Route"
	| {Nimrod} "Nimrod"
	| {Type2} "Type-2-Routing-Header"
	| {RPLSource} "RPL-Source-Route-Header"
	| {Segment} "Segment-Routing-Header"
	| {Unassigned} "Unassigned"
	| {RFC3692Experiment1} "RFC3692-style-Experiment-1"
	| {RFC3692Experiment2} "RFC3692-style-Experiment-2"
	| {Reserved} "Reserved"
;

Protocol:
	{RSVP} "RSVP"
	| {MLD} ("MLD" | "Multicast")
;

IpAddSpec:
	adress = IpAddRange ("/" mask=IPNUMBER)? (":" port=PortRange)?
;

IpAddRange:
	"any" | IPADRESS
;

PortRange:
	"any" | IPNUMBER
;

terminal IPADRESS returns ecore::EString: IPNUMBER "." IPNUMBER "." IPNUMBER "." IPNUMBER;
terminal IPNUMBER returns ecore::EInt:  ('0'..'9' | '1'..'9' '0'..'9' | '1' '0'..'9' '0'..'9' | '2' '0'..'4' '0'..'9' | '2' '5' '0'..'5');
