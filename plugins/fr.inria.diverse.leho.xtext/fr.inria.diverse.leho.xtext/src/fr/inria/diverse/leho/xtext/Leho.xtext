// automatically generated by Xtext
grammar fr.inria.diverse.leho.xtext.Leho with org.eclipse.xtext.common.Terminals

import "http://www.inria.fr/diverse/leho" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Policy:
	{Policy} configuration=Configuration? filter=Filter?
;

Configuration:
	"discard" "=" ({DiscardReject}"reject" | {DiscardDrop}"drop")
;

Filter:
	firstRule=Rule
;

Rule:
	RuleAtomic next=Rule?
;

RuleAtomic returns Rule:
	action=Action interface=[Interface|INTERFACE]? extensionheader+=ExtensionHeader+ ("from" from=IpAddSpec "to" to=IpAddSpec)?
;

Action:
	{Accept} "accept"
	| {Drop} "drop"
	| {Reject} "reject"
	| {Discard} "discard"
	| {Bandwidth} "limit" "rate" "to" unit=Unit "/" time=Time
;

Unit:
	{BitUnit} "b"
	| {OctetUnit} "o"
	| {PacketUnit} "p"
;

Time:
	{Second} "s"
	| {Minute} "m"
	| {Hour} "h"
	| {Day} "d"
;

ExtensionHeader:
	{HopByHopOpts} "hop-by-hop" "where" "option" "=" options+=OptionHopByHop ("and" "option" "="  options+=OptionHopByHop)*
	| {HostIdentityProtocol} "host-identity-protocol"
	| {ExperimentationAndTesting} "experimentation-testing"
	| {EncapsulingSecurityPayload} "encapsuling-security-payload"
	| {UnknownEH} "unkown"
	| {DestinationOpts} "destination-option" "where" "option" "=" options+=OptionDestination ("and" "option" "="  options+=OptionDestination)*
	| {Shim6Protocol} "shim6-protocol"
	| {AuthentificationHeader} "authentification-header"
	| {Fragment} "fragment-header"
	| {MobilityHeader} "mobility-header"
	| {Routing} "routing-header" "where" "type" "=" type=TypeRouting
;

OptionHopByHop:
	{Calipso} "calipso"
	| {MPLOption} "mpl-option"
	| {JumboPayload} "jumbo-payload"
	| {RPLOption} "rpl-option"
	| {SmfDpd} "smf-dpd"
	| {DFF} "dff"
	| {QuickStart} "quickstart"
	| {RouterAlert} "router-alert" "where" "protocol" "=" protocol=Protocol
	| Options
;

Options:
	{Pad1} "pad1"
	| {PadN} "padN"
	| {Deprecated} "deprecated"
	| {EndPointIdentification} "endpoint-id"
	| {RFC3692Experiment} "rfc3692-experiment"
;

OptionDestination:
	Options
	| {HomeAdress} "home-address"
	| {ILNPNonce} "ilnp-nonce"
	| {LineIdOption} "line-id-option"
	| {IPv6PerformanceDiagnostic} "ipv6-perfomance-diagnostic"
	| {TunnelEncapsulationLimit} "tunnel-encapsulation-limit"
;

Protocol:
	{MLD} "mld" | {RSVP} "rsvp"
;

TypeRouting:
	{SourceRoute} "source-route"
	| {Unassigned} "unassigned"
	| {RFC3692Experiment1} "rfc3692-experiment-1"
	| {RFC3692Experiment2} "rfc3692-experiment-2"
	| {Nimrod} "nimrod"
	| {RPLSource} "rpl-source"
	| {Reserved} "reserved"
	| {Segment} "segment" 
	| {Type2} "type2"
;

IpAddSpec: 
	(adress=IPV6 | ("["adress=IPV6"]" port=[Port|PORT])) ("/" mask=INT)? 
;

terminal IPV6 returns ecore::EString:HEXNUMBER?":"HEXNUMBER?":"HEXNUMBER?":"HEXNUMBER?":"HEXNUMBER?":"HEXNUMBER?":"HEXNUMBER?":"HEXNUMBER?;
terminal HEXNUMBER returns ecore::EString:(('0'..'9'|'a'..'f'|'A'..'F'))(('0'..'9'|'a'..'f'|'A'..'F'))(('0'..'9'|'a'..'f'|'A'..'F'))(('0'..'9'|'a'..'f'|'A'..'F'));
terminal PORT returns ecore::EString: ":"INT;
terminal INTERFACE returns ecore::EString: "inbound" | "outbound";
